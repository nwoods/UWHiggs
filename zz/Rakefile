# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

$jobid = ENV['jobid']

# Figure out what run period we are in
$period = '7TeV'
if $jobid.include? '8TeV'
  $period = '8TeV'
end
if $jobid.include? '13TeV'
  $period = '13TeV'
end

################################################################################
## Sample names ################################################################
################################################################################

# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end
samples = Hash[
  "signal" => get_sample_names('ZZJets'),
  "all_bg" => Array['Zjets_M50', 'TTplusJets_madgraph', 'DYJetsToLL_M-10To50filter_8TeV-madgraph', 'GluGluToHToZZTo4L_M-125_8TeV-powheg-pythia6'] + get_sample_names('WZJets') + get_sample_names('WWJets'),
  "data_mm" => get_sample_names("data_DoubleMu"),
  "data_ee" => get_sample_names("data_DoubleElectron"),
  "data_em" => get_sample_names("data_MuEG"),
]

# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end

###########################################
########### Analysis Recipe ###############
###########################################

analyzer_dependencies = Hash[
  "ZZAnalyzeMMMM.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
  "ZZAnalyzeEEMM.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
  "ZZAnalyzeEEEE.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
#   "ZZAnalyzeEEE.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
#   "ZZAnalyzeEEM.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
#   "ZZAnalyzeMME.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
#   "ZZAnalyzeMMM.py" => Array["baseSelections.py", "ZZAnalyzerBase.py"],
]

#check if base class or some selections has changed
analyzer_dependencies.each do |analyzer, deps|
  #puts analyzer
  #puts deps.inspect
  file analyzer => deps do |t|
    #puts t.investigation
    sh "touch #{t.name}"
  end
end

task :mmmm => get_analyzer_results("ZZAnalyzerMMMM.py", samples['all_bg'] + samples['signal'] + samples['data_mm'])
task :eemm => get_analyzer_results("ZZAnalyzerEEMM.py", samples['all_bg'] + samples['signal'] + samples['data_mm'] + samples['data_ee'] + samples['data_em'])
task :eeee => get_analyzer_results("ZZAnalyzerEEEE.py", samples['all_bg'] + samples['signal'] + samples['data_ee'])
# task :eee => get_analyzer_results("ZZAnalyzerEEE.py", samples['all_bg'] + samples['signal'] + samples['data_ee'])
# task :eem => get_analyzer_results("ZZAnalyzerEEM.py", samples['all_bg'] + samples['signal'] + samples['data_ee'])
# task :mme => get_analyzer_results("ZZAnalyzerMME.py", samples['all_bg'] + samples['signal'] + samples['data_ee'])
# task :mmm => get_analyzer_results("ZZAnalyzerMMM.py", samples['all_bg'] + samples['signal'] + samples['data_ee'])
task :mmmm_dataonly => get_analyzer_results("ZZAnalyzerMMMM.py", samples['data_mm'])
task :eemm_dataonly => get_analyzer_results("ZZAnalyzerEEMM.py", samples['data_mm'] + samples['data_ee'])
task :eeee_dataonly => get_analyzer_results("ZZAnalyzerEEEE.py", samples['data_ee'])


# Do the analysis
#multitask :analyzeZZ => [:mmmm, :eemm, :eeee, :mmm, :mme, :eem, :eee] do
#task :analyzeZZ => [:mmm, :eem, :eee, :mme, :mmmm, :eemm, :eeee] do
task :analyzeZZ => [:mmmm, :eemm, :eeee] do #, :eee, :eem, :mme, :mmm] do
  puts "called analyzeZZ task from local rakefile"
end
task :analyzeZZ_dataonly => [:mmmm_dataonly, :eemm_dataonly, :eeee_dataonly] do
  puts "called analyzeZZ task from local rakefile on data only"
end